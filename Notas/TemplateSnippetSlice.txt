
//Nota:
//-- Crear un Snippet en VSC - Para que al Escribir reduxSlice aparezca la plantilla a editar el Slice
//-> en VSC -> Precionar: CTRL+SHIF+P -> escribir: >configure User Snippets 
//-> Elegir el lenguaje: javascript ->
//-> Definirlo:


{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

"Crear un slice de Redux": {
	"prefix": "redux-slice",
	"body": [
		"import { createSlice } from '@reduxjs/toolkit';",
		"",
		"const initialState = {",
		"	counter: 10,",
		"}",
		"",
		"	export const ${1:${TM_FILENAME_BASE}} = createSlice({",
		"		name: '${TM_FILENAME_BASE/(Slice)//}', //nombre del slice",
		"		initialState,",
		"		reducers: {",
		"",
		"		//Definir las funciones",
		"			increment: (state) => {",
		"				state.counter += 1;",
		"			},",
		"			//incrementa en 2 en 2 o segun el valor enviado de parametro (action.payload)",
		"			incrementBy : (state, action) => {",
        "			state.counter += action.payload;",
    	"			},"
		"",
		"		}",
		"	});",
		"",
		"",
		"// Action creators are generated for each case reducer function",
		"// Exporta las funciones para que pueda ser utilizada por otros component",
		"export const { increment, incrementBy } = ${1:${TM_FILENAME_BASE}}.actions;",
	],
	"description": "Crear un slice de Redux"
}
}












