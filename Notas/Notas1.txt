

	--	Notas Curso: React: De cero a experto ( Hooks y MERN ) 	--

- Sitio de Babel:   https://babeljs.io/


- Seccion 3: Intro a JavaScript Moderno


// Ejemplo de crear proyecto de React usando Vite
PS C:\Users\Escritorio\react-0-a-experto> npm create vite@latest
√ Project name: ... 02-intro-javascript   //definir nombre del proyecto
√ Select a framework: » React		//Elegir React
√ Select a variant: » JavaScript	//Elegir JavaScript

Done. Now run:    
  cd 02-intro-javascript  //Entrar a la carpeta del proyecto creado
  npm install     	  //Instalar las dependencias
  npm run dev 		  //Levantar el proyecto


- Recursos
-- Bases de JavaScript
https://create-react-app.dev/

-- Arreglos
https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/map

-- Desestructuracion de objetos
https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

-- Import, export y funciones comunes en arreglos
https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find
https://gist.github.com/Klerith/4aeb99d31aedbc29ff4d54bbb77d2d7f

-- Promesas 
https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise

-- Fetch API
https://developers.giphy.com/  
// para crear API: 
 https://developers.giphy.com/dashboard/  -- clic create an API key -→ clic API 
-→ agregar nombre y descripcion -> creacte app -> copiar el API Key y pegar en nuestro proyecto de VSC: VGTFsHDEQDQ3G5w9D5Rax75tZaljPOG0
-> ir a docs -> API -→ Endpoints -→ Buscar en el Menu: Random Endpoint
copiar la url de GIF URL en el navegador: api.giphy.com/v1/gifs/random
luego darle enter y
luego pegar en el navegador el apikey:  ?apikey=VGTFsHDEQDQ3G5w9D5Rax75tZaljPOG0

Ruta de la API queda asi: https://api.giphy.com/v1/gifs/random?apikey=VGTFsHDEQDQ3G5w9D5Rax75tZaljPOG0
--La informacion que  interesa esta dentro de data e images original

https://developer.mozilla.org/es/docs/Web/API/Fetch_API

- Temas principales de JavaScript: https://developer.mozilla.org/es/


------ Seccion 4: Primeros pasos en React   ------

Instalar prop-types para validar las props que se reciben del padre
- instalar en la consola ruta de la app: npm i prop-types

- Para validar las props con propTypes realizamos lo siguiente:

- Importar la libreria: 
import PropTypes from 'prop-types'

- Revisar las props que se importan desde el padre
export const FirstApp = ({title, subtitle}) =>{ //props importadas

-Hasta el final del documento validar las props:

//Definir los props por defecto en caso de que no viene del padre pero si viene tomará la del padre
FirstApp.defaultProps = {
    title: 'Soy Goku',
}

//Validar las props que se recibe del padre cumpla con el tipo de dato requerido
FirstApp.propTypes ={
    title: PropTypes.string.isRequired,
    subtitle: PropTypes.string.isRequired,
}


Para ordenar líneas de código de forma ascendente en Visual Studio Code,

1) Abre el archivo que contiene el código que deseas ordenar.

2) Selecciona las líneas de código que deseas ordenar. Puedes seleccionarlas 
	manualmente o usar el atajo de teclado Ctrl + A (Windows/Linux) o 
	Cmd + A (Mac) para seleccionar todo el contenido del archivo.

3) Una vez seleccionado el código, presiona F1 o Ctrl + Shift + P (Windows/Linux) o 
	Cmd + Shift + P (Mac) para abrir la barra de comandos.

4) Empieza a escribir "Sort Lines" en la barra de comandos. A medida que escribas, 
	verás sugerencias de comandos relacionados.

5) Deberías ver una opción llamada "Sort Lines Ascending" en la lista de sugerencias.
	 Selecciónala.

¡Listo! Las líneas seleccionadas se ordenarán en orden ascendente basado en su contenido.


	------- Seccion 5: Pruebas unitarias y de integracion  -------

-- Si el proyecto fue creado por npx create react-app app ya tiene instalado libreria para pruebas
-- Como el  proyecto fue creado con Vite + React no trae instalado librerias para prueba por
lo que procedemos a instalarlos. Y realizar la siguiente configuracion.
-- Ir a al sitio de Jest que es una framework para hacer pruebas para proyectos con JavaScript
como react, node, angular, etc.

-- Ir al sitio de -> https://jestjs.io/  -→ ir a Getting Started -→
-> copiar: npm install --save-dev jest -> y pegarlo en la consola en la
ruta de la aplicacion para instalar jest.
-> Luego ir al package.json para ver que se instalo Jest. ->
-> en Package.json  en la parte de: "scripts": agregar: "test": "jest" 
-> Otra opcion es agregar en Package.json "test": "jest --watchAll" para poder ver los estados.
-> para ejecutar la aplicacion escribir en consola: npm run test

-> Dentro de la carpeta del proyecto a nivel de src Crear una carpeta llamada tests
Esta sera para pruebas un espejo de todas las carpetas y los archivos de la carpeta src.
Los archivos de test deben tener la extension: .test.js para archivos javascript y
para los archivos o componentes de react debe tener la extension: .test.jsx
ejemplo: 02-template-string.test.js
-- No se puede hacer pruebas a un archivo que no este exportado: export

-- Para poder tener ayuda en como se escribe las funciones de jest se debe instalar
instalar en consola de la ruta de la app: npm add -D @types/jest

-- Debido a que el proyecto fue creado con Vite para las pruebas se debe de 
Instalar la configuracion de Babel para test en la ruta del proyecto. 
--> ejecutar: npm install --save-dev babel-jest @babel/core @babel/preset-env
-- Crear un archivo dentro del proyecto a nivel de src: babel.config.cjs
-> dentro del archivo babel.config.cjs agregar la siguiente configuracion:
	module.exports = {
    presets: [
        ['@babel/preset-env', { targets: {esmodules:true}}],
        ['@babel/preset-react', { runtime: 'automatic'}],
    ],
  };


Nota:
Extensión de archivos
Configuración para las pruebas de nuestros distintos archivos, en caso de ver 
el error "You appear to be using a native ECMAScript module configuration file, 
which is only supported when running Babel asynchronously."

Cambiar extensión de los archivos jest.config.js y babel.config.js a .cjs
Para ver mas detalles al respecto pueden ir a 
https://nodejs.org/docs/latest/api/modules.html#enabling.

-- Para ejecutar las pruebas
-- ejecutar: npm run test  -> presionar w -> precionar p -> escribir el nombre de
archivo "02-template-string" a ejecutar a probar. esto para solo ejecutar este archivo.

//Nota: Para las pruebas lo que se tiene que hacer es ejecutar la funcion y
evaluar el valor de retorno si es el esperado.

--- PARA FETCH API - Nota para versiones menores a 18 en node realizar esta configuracion, 
las versiones mayores a 18 ya lo traen
--Crear un archivo: jest.config.cjs dentro del proyecto al nivel de la carpeta src
--Crear un archivo: jest.setup.js dentro del proyecto al nivel de la carpeta src
--- Dentro del archivo: jest.setup.js agregar: import 'whatwg-fetch';

-- instalar en la ruta de la app: npm add -D whatwg-fetch
-- instalar en la ruta de la app: npm add -D jest-environment-jsdom  o npm install -D jest@29.5
-- instalar en la ruta de la app: > npm add -D @babel/preset-react

-- Dentro del archivo jest.config.js agregar:
	module.exports = {
		testEnvironment:'jest-environment-jsdom',
    		setupFiles:['./jest.setup.js'],
  	};


//Para pruebas de los componentes en React instalar:

-Jest: es mas enfocada para hacer aserciones validaciones de funciones
-ir -> https://jestjs.io/ -> docs -> Framework Guides -> Testing React Apps -> 
-- Hasta abajo del documento nos describe que se debe usar Testing Library e indica como instalarlo.

- Testing Library: es muy bueno para manejar el DOM virtual, automaticamente hace los clic en botones, hacer interacciones, etc
- ir al sitio -> https://testing-library.com/ ->menu -> Frameworks -> React Testing Library: https://testing-library.com/docs/react-testing-library/intro
-- Instalar en ruta de la app: npm install --save-dev @testing-library/react

--La extension para los archivos de pruebas para components en React es: .test.jsx -> FirstApp.test.jsx


#### Seccion 6 - gif-expert-app
Recurso:https://legacy.reactjs.org/docs/strict-mode.html

PS C:\Users\Hp01\Escritorio\React-0-a-experto> npm create vite       
√ Project name: ... 04-gif-expert-app
√ Select a framework: » React
√ Select a variant: » JavaScript
Done. Now run:
  cd 04-gif-expert-app
  npm install      
  npm run dev     


Para cambiar el puerto tienes que ir al archivo de vite.config.js y colocarlo de la siguiente manera:
export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
  }
})


//Crear un API en el sitio: https://developers.giphy.com/

https://developers.giphy.com/  
// para crear API: 
 https://developers.giphy.com/dashboard/  -- clic create an API key -→ clic API 
-→ agregar nombre y descripcion -> creacte app -> copiar el API Key y pegar en nuestro proyecto de VSC: VGTFsHDEQDQ3G5w9D5Rax75tZaljPOG0
-> ir a docs -> API -→ Endpoints -→ Buscar en el Menu: Random Endpoint
copiar la url de GIF URL en el navegador: api.giphy.com/v1/gifs/random
luego darle enter y
luego pegar en el navegador el apikey:  ?apikey=VGTFsHDEQDQ3G5w9D5Rax75tZaljPOG0

Ruta de la API queda asi: https://api.giphy.com/v1/gifs/random?apikey=VGTFsHDEQDQ3G5w9D5Rax75tZaljPOG0
--La informacion que  interesa esta dentro de data e images original

https://developer.mozilla.org/es/docs/Web/API/Fetch_API


Recursos:
https://es.legacy.reactjs.org/docs/faq-structure.html
https://hackernoon.com/structuring-projects-and-naming-components-in-react-1261b6e18d76
https://gist.github.com/Klerith/e4fca6ac127ccb9abd1e8ad77fcd52f1


--- Traer Gifs 
--Probar en Postman:
GET: api.giphy.com/v1/gifs/search  -- Error 404 necesita el ?api_key
GET: api.giphy.com/v1/gifs/search?api_key=VGTFsHDEQDQ3G5w9D5Rax75tZaljPOG0  --Status 200 ok falta especificar que gif buscar al final de la url agregar "&q=NOMBRE_DEL_GIF" 
GET: api.giphy.com/v1/gifs/search?api_key=VGTFsHDEQDQ3G5w9D5Rax75tZaljPOG0&q=valorant&limit=20 //se agrego limite = 20

    const url = ` http://api.giphy.com/v1/gifs/search?api_key=VGTFsHDEQDQ3G5w9D5Rax75tZaljPOG0&q=${category}&limit=20`;
      


-- Demostracion de Produccion Rapido
-- Abrir el package.json -> ver el comando en: scripts -> build
-- Ejecutar en consola en la ruta de la app: npm run build
-- Luego revisar la carpeta "dist" dentro del proyecto. Y ahi se encuentra la app de produccion optimizada:
	dentro de la carpeta "dist" esta la carpeta assets y el archivo index.html y la imagen vite.svg 
	estos archivos son los que se tomarian y se subirian a un hosting

- http-server: a simple static HTTP server
-- Para subir el proyecto un servidor local
ir al link: https://www.npmjs.com/package/http-server

-- Globally via npm - Instalar usando CMD:   npm install --global http-server
luego estando en consola: entrar o hacer un cd a la carpeta dist del proyecto.
 cd C:\Users\Hp01\OneDrive\Escritorio\React-0-a-experto\04-gif-expert-app\dist   
luego:  http-server -o   //para que abra nuestro proyecto en produccion(simulacion) 


## Seccion 7 Deploy en Github
-- Ejecutar: git checkout -- .   //Para rehacer el estado de nuestro codigo de la app hasta el ultimo commit

-- Ejecutar en consola en la ruta de la app: npm run build
-- Luego revisar la carpeta "dist" dentro del proyecto. 
-> Renombrar la carpeta "dist" a "docs" 
-> Entrar al archivo index.html de la carpeta docs para editar lineas de codigo. Agregarles un punto antes de la ruta.
    <script type="module" crossorigin src="./assets/index-DuLSGigz.js"></script>
    <link rel="stylesheet" crossorigin href="./assets/index-DQ2fAogY.css">

->Ir a github -> entrar al repositorio del proyecto ->Clic en settings 
-> Clic en page -> Elegir la rama main -> Elegir folder: /docs ->clic en save. →Listo

## Seccion 8 - Pruebas de 04-gif-expert-app
//screen.debug(); //muestra en pantalla el component que se esta evaluando con sus datos que se ingresan

Datos:
<form 
	onSubmit={onSubmit} 
	aria-label="form" //es su key para cuando se hacen pruebas
>









































































































































